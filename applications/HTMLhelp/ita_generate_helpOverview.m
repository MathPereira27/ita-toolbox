function ita_generate_helpOverview(folder)
%ITA_GENERATE_HELPOVERVIEW - Generate Toolbox Help
%  This function automatically generates html/xml files for the Matlab Help
%  Browser (apps.html, classes.html, index_demos.html, helptoc.xml)
%
%   See also help, doc, helpdesk, ita_toolbox_setup, ita_generate_documentation.
%
%   Reference page in Help browser
%        <a href="matlab:doc ita_generate_helpOverview">doc ita_generate_helpOverview</a>

% <ITA-Toolbox>
% This file is part of the application HTMLhelp for the ITA-Toolbox. All rights reserved.
% You can find the license for this m-file in the application folder.
% </ITA-Toolbox>


% Author: Jonas Tumbrgel -- Email: jonas.tumbraegel@akustik.rwth-aachen.de
% Created:  18-May-2012

%% Help Browser->link Demos (helptoc.xml/index_demo.html changed by this code)
% - Tumbrgel 05/2012
% This part looks for avaliable 'ita_tutorial_____.m Files and links them
% into Matlab Help Browser (doc) as demo in "RWTH ITA Toolbox"
% 1. open helptoc.xml and look for insertion point with ita_openHTML
% helptoc.xml generates RWTH ITA Toolbox menu-point in MATLAB Help Browser
% 2. open index.html and look for insertion point with ita_openHTML
% 3. looks for avaliable tutorials in Toolbox Folder (tutorials)
% 4. Generate helptoc.xml and index_demo.html->link existing tutorials
%%%%%%%%%%%%%%%%%%%%%%%%%
% 1. ....
oldfolder = cd;
pos = strfind(folder,filesep);
toolboxFolderName = folder(pos(end)+1:end);

[helpXML_begin, helpXML_end] = ita_openHTML([ita_toolbox_path filesep 'applications' filesep 'HTMLhelp' filesep 'templates' filesep 'template_helptoc.xml']);
% 2. ....
[index_demoHTML_begin, index_demoHTML_end] = ita_openHTML([ita_toolbox_path filesep 'applications' filesep 'HTMLhelp' filesep 'templates' filesep 'template_index_demos.html']);
% 3. ....
cd(folder);
tutFiles = rdir(['**' filesep 'ita_tutorial*.m']); %search for tutorial files

% 4. ....
helpXML = [helpXML_begin]; %now build a new helptoc.xml
index_demoHTML = [index_demoHTML_begin]; %now build a new index_demo.html
idxApp=1;
appDemo=[];
for idx = 1:length(tutFiles)
    if length(tutFiles(idx).name)>16
        if strcmp(tutFiles(idx).name(end-16:end),'compileDocument.m') %do not generate html help for those
            continue
        end
    end
    tutFiles(idx).html = publish(tutFiles(idx).name,struct('evalCode',false,'outputDir',[folder filesep 'HTML' filesep 'tutorials']));%finally generate linked HTML File
    pos = strfind(tutFiles(idx).html,toolboxFolderName);
    tutFiles(idx).html = tutFiles(idx).html(pos(1)+length(toolboxFolderName)+1:end);
    tutFiles(idx).html = strrep(tutFiles(idx).html,filesep,'/');%conversion for html
    cd(folder)
    
    app = strfind(tutFiles(idx).name,'applications'); %check if application tutorial
    
    %get tutorial comment (for both):
    FileId = fopen(tutFiles(idx).name);
    tutFile = fread(FileId, 'uint8=>char');
    tutFile = tutFile(:)';
    %now search for title/comment for help
    commentStart = strfind(tutFile,'%%');
    if isempty(commentStart)
        commentStart = 0;
    end
    commentEnd   = strfind(tutFile,sprintf('\n'));
    tutFiles(idx).comment = tutFile(commentStart(1)+2 : commentEnd(1)-2);
    fclose(FileId);
    cd(oldfolder);
    
    
    if isempty(app)
        % generate new helptoc.xml
        fileLocationHTML = strrep(tutFiles(idx).name,filesep,'/');%conversion for html
        helpXML = [helpXML,...
            '        <tocitem target="../',...
            tutFiles(idx).html,...
            '" image="$toolbox/matlab/icons/book_mat.gif">',...
            tutFiles(idx).comment,...
            '</tocitem>',...
            sprintf('\n'),...
            ];
        % generate new index_demo.html
        index_demoHTML = [index_demoHTML,...
            '  <tr>',...
            sprintf('\n'),...
            '      <td height="40" width="140" align="left">',...
            sprintf('\n'),...
            '      <a href="../',...
            tutFiles(idx).html,...
            '">',...
            tutFiles(idx).name(1:end-2),...
            '</a>',...
            sprintf('\n'),...
            '      </td>',...
            sprintf('\n'),...
            '      <td height="40" align="left">',...
            sprintf('\n'),...
            '     ',...
            tutFiles(idx).comment,...
            sprintf('\n'),...
            '      </td>',...
            sprintf('\n'),...
            '  </tr>',...
            sprintf('\n'),...
            ];
    else
        appDemo{idxApp} = tutFiles(idx);
        idxApp = idxApp+1;
    end
end
% now put all application demos in helptoc.xml + application_demo.html file:
[app_demoHTML_begin app_demoHTML_end] = ita_openHTML([ita_toolbox_path filesep 'applications' filesep 'HTMLhelp' filesep 'templates' filesep 'template_application_demos.html']);
app_demoHTML = [app_demoHTML_begin];
if ~isempty(appDemo)
    %XML File:
    helpXML = [helpXML,...
        '        <tocitem target="application_demos.html" image="HelpIcon.EXAMPLES">Application Demos',...
        sprintf('\n')];
    for idx = 1:length(appDemo)
        fileLocationHTML = strrep(appDemo{idx}.name,filesep,'/');
        appDemo{idx}.name = appDemo{idx}.name(14:end); %no "/applications/" in front of the name
        helpXML = [helpXML,...
            '           <tocitem target="../',...
            appDemo{idx}.html,...
            '" image="$toolbox/matlab/icons/book_mat.gif">',...
            appDemo{idx}.comment,...
            '</tocitem>',...
            sprintf('\n'),...
            ];
        
        %HTML File:
        app_demoHTML = [app_demoHTML,...
            '  <tr>',...
            sprintf('\n'),...
            '      <td height="40" width="140" align="left">',...
            sprintf('\n'),...
            '      <a href="../',...
            appDemo{idx}.html,...
            '">',...
            appDemo{idx}.name(1:end-2),...
            '</a>',...
            sprintf('\n'),...
            '      </td>',...
            sprintf('\n'),...
            '      <td height="40" align="left">',...
            sprintf('\n'),...
            '     ',...
            appDemo{idx}.comment,...
            sprintf('\n'),...
            '      </td>',...
            sprintf('\n'),...
            '  </tr>',...
            sprintf('\n'),...
            ];
    end
    helpXML = [helpXML, '        </tocitem>'];
end
helpXML = [helpXML, helpXML_end]; %put code after insertion point at the end
index_demoHTML = [index_demoHTML, index_demoHTML_end];
app_demoHTML = [app_demoHTML, app_demoHTML_end];
ita_writeHTML([folder filesep 'HTML' filesep 'helptoc.xml'],helpXML) %overwrite old file
ita_writeHTML([folder filesep 'HTML' filesep 'index_demos.html'],index_demoHTML)
ita_writeHTML([folder filesep 'HTML' filesep 'application_demos.html'],app_demoHTML);
copyfile(fullfile(ita_toolbox_path,'applications','HTMLhelp','templates','template_info.xml'), ...
	fullfile(folder, 'HTML','info.xml'));

%% generate Class/App Documentation in Help Browser
% - Tumbrgel 05/2012
%
% This part should list all Toolbox classes into class.html and
% applications into apps.html
% 1. search for all files with itaBIGLETTER: (those should be classes)
%    sort files from 'application' folder to another array
% 2. edit html Files

%% 1.
idxApp=1;
idxNfile=1;
appName=[];
offset = double('A')-1;
for idx = 1:(double('Z')-offset)
    currentCharFiles = rdir([folder filesep '**' filesep 'ita' char(idx+offset) '*.m']);
    if ~isempty(currentCharFiles)
        for idxY = 1:length(currentCharFiles)
            fileseps = strfind(currentCharFiles(idxY).name,filesep); %search all '\' to get filenameend
            app = strfind(currentCharFiles(idxY).name,'applications'); % sort apps in another list
            if isempty(app)
                nFileList{idxNfile} = currentCharFiles(idxY).name((fileseps(end)+1):end);
                idxNfile=idxNfile+1;
            else
                appFileName{idxApp} = currentCharFiles(idxY).name((fileseps(end)+1):end);
                appTempName = currentCharFiles(idxY).name(app+length('applications')+1:end);
                filesepApp = strfind(appTempName,filesep);
                appName{idxApp} = appTempName(1:filesepApp(1)-1);
                idxApp=idxApp+1;
            end
        end
    end
end

% now sort all found application files (itaA..., itaB,..., ...., itaZ...) to right application
% store old position to appIdx to read right positions in appFileName
[appName,appIdx] = sort(appName);

%% 2.
% -> edit classes.html
%get template_classes.html content:
[classesHTML_begin classesHTML_end] = ita_openHTML([ita_toolbox_path filesep 'applications' filesep 'HTMLhelp' filesep 'templates' filesep 'template_classes.html']);
classesHTML= [classesHTML_begin];
for idx = 1:length(nFileList)
    classesHTML = [classesHTML,...
        '<a href="matlab:doc ',...
        nFileList{idx},...
        '">',...
        nFileList{idx}(1:end-2),...
        '</a><br>',...
        sprintf('\n')
        ];
end
if ~isempty(appName)
    classesHTML = [classesHTML '<br><br>The following classes are app-classes<br>' sprintf('\n')];
    for idx= 1:length(appName)
        if idx>1
            if strcmp(appName(idx),appName(idx-1)) %
                classesHTML = [classesHTML,...
                    '<a href="matlab:doc ',...
                    appFileName{appIdx(idx)},... %appIdx(idx) see comment above (right position)
                    '">',...
                    appFileName{appIdx(idx)}(1:end-2),...
                    '</a><br>',...
                    sprintf('\n')
                    ];
            else %next App headline+file
                classesHTML = [classesHTML,...
                    '<br>',...
                    appName{idx},...
                    '<br>',...
                    '<a href="matlab:doc ',...
                    appFileName{appIdx(idx)},...
                    '">',...
                    appFileName{appIdx(idx)}(1:end-2),...
                    '</a><br>',...
                    sprintf('\n')
                    ];
            end
        else %first App headline+file
            classesHTML = [classesHTML,...
                '<br>',...
                appName{idx},...
                '<br>',...
                '<a href="matlab:doc ',...
                appFileName{appIdx(idx)},...
                '">',...
                appFileName{appIdx(idx)}(1:end-2),...
                '</a><br>',...
                sprintf('\n')
                ];
        end
    end
end
classesHTML=[classesHTML, '<br>', sprintf('\n'), classesHTML_end];
%write edited file
ita_writeHTML([folder filesep 'HTML' filesep 'classes.html'],classesHTML)

% -> edit apps.html
[appsHTML_begin appsHTML_end] = ita_openHTML([ita_toolbox_path filesep 'applications' filesep 'HTMLhelp' filesep 'templates' filesep 'template_apps.html']);
appsHTML= [appsHTML_begin];
%%%%%%%%%%%%%%%%%%%
appfolder = rdir([folder filesep '**' filesep 'ita_apps.m']);
if isempty(appfolder)
    appsHTML = [appsHTML 'sorry you do not have any application installed. Could not find "ita_apps.m"<br>' appsHTML_end];
else
    appfolder = appfolder(1).name;
    temp = strfind(appfolder, filesep);
    appfolder = appfolder(1:temp(end)-1);
    applist = rdir([appfolder filesep '**' filesep 'AppDescription.txt']);
    
    
    appsHTML = [appsHTML '<table border="2">' sprintf('\n')];
    for idx = 1:numel(applist)
        appDescriptionPath = applist(idx).name;
        nameidx = strfind(appDescriptionPath,filesep);
        appDocumentationFile = [appDescriptionPath(1:nameidx(end-2)),...
            'HTML',...
            filesep,...
            'doc',...
            filesep,...
            appDescriptionPath(nameidx(end-3)+1:nameidx(end)),...
            'index.html'];
        appname = appDescriptionPath(nameidx(end-1)+1:nameidx(end)-1);
        appDescriptionPath = strrep(appDescriptionPath, filesep, '/'); %convert ..\.. to ../.. for html
        
        data_ID = fopen(appDescriptionPath,'r'); %r read only
        data = fread(data_ID, 'uint8=>char');
        fclose(data_ID);
        data = data(:)'; %get AppDescription.txt as string
        desPoint = strfind(data,'Description:');
        data = data(desPoint+12:end);
        desPoint = strfind(data,sprintf('\n'));
        data = data(1:desPoint);
        % old: show complete AppDescription.txt....
        %'<td><object data="file:///', appDescriptionPath, '" type="text/plain" width="350" height="90">', sprintf('\n'),...
        %'Ihr Browser kann das Objekt leider nicht anzeigen!</object></td>',sprintf('\n'),..
        appsHTML = [appsHTML,...
            '<tr height="30">', sprintf('\n'),...
            '<td width="100"><a href="file:///', appDocumentationFile,'">', appname, '</a></td>', sprintf('\n'),...
            '<td>', data, sprintf('\n'),...
            '</td>',sprintf('\n'),...
            '</tr>', sprintf('\n')];
    end
    appsHTML = [appsHTML '</table>' appsHTML_end];
end

%write edited file
ita_writeHTML([folder filesep 'HTML' filesep 'apps.html'],appsHTML)

%% Generate Kernel Documentation
[kernelHTML_begin kernelHTML_end] = ita_openHTML([ita_toolbox_path filesep 'applications' filesep 'HTMLhelp' filesep 'templates' filesep 'template_kernel.html']);
kernelHTML= [kernelHTML_begin];
kernelList = rdir([folder filesep 'kernel' filesep '**' filesep 'KernelDescription.txt']);

kernelHTML = [kernelHTML '<table border="2">' sprintf('\n')];

for idx = 1:numel(kernelList)
    % get Kernelfoldername
    kernelDescriptionPath = kernelList(idx).name;
    pos = strfind(kernelDescriptionPath,'kernel');
    kernelName{idx} = kernelDescriptionPath(pos(1)+7:end);
    pos = strfind(kernelName{idx},'KernelDescription.txt');
    kernelName{idx} = kernelName{idx}(1:pos(1)-2);
    
    %get m2html documentation fileposition:
    pos = strfind(kernelDescriptionPath,'kernel');
    kernelFolder = kernelDescriptionPath(pos(1):end);
    pos = strfind(kernelFolder,filesep);
    kernelFolder = kernelFolder(1:pos(end));
    kernelDocumentationFile = [folder,...
        filesep,...
        'HTML',...
        filesep,...
        'doc',...
        filesep,...
        toolboxFolderName,...
        filesep,...
        kernelFolder,...
        'index.html'];
    kernelDocumentationFile = strrep(kernelDocumentationFile, filesep, '/'); % replace /,\, for HTML
    %get KernelDescription.txt
    data_ID = fopen(kernelDescriptionPath,'r'); %r read only
    data = fread(data_ID, 'uint8=>char');
    fclose(data_ID);
    data = data(:)'; %get KernelDescription.txt as string
    desPoint = strfind(data,'Description:');
    data = data(desPoint+12:end);
    desPoint = strfind(data,sprintf('\n'));
    data = data(1:desPoint);
    kernelHTML = [kernelHTML,...
        '<tr height="30">', sprintf('\n'),...
        '<td width="100"><a href="file:///', kernelDocumentationFile,'">', kernelName{idx}, '</a></td>', sprintf('\n'),...
        '<td>', data, sprintf('\n'),...
        '</td>',sprintf('\n'),...
        '</tr>', sprintf('\n')];
end
kernelHTML = [kernelHTML '</table>' kernelHTML_end];
ita_writeHTML([folder filesep 'HTML' filesep 'kernel.html'],kernelHTML)

cd(oldfolder);
end
